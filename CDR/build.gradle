plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'rom.cdr'
version = '0.0.2'

sourceSets {
    sourceSets {
        test {
            java {
                srcDirs = ['src/test/java']
            }
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'org.example.Application'
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext['kafka.version'] = '3.5.0'
ext['spring-kafka.version'] = '3.3.9'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.liquibase:liquibase-core'
    implementation 'com.opencsv:opencsv:5.8'
    implementation 'org.springframework.kafka:spring-kafka'
//    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/exception/**',
                    '**/dto/**',
                    '**/entity/**',
                    '**/*Exception.java',
                    '**/*Dto.java',
                    '**/config/**',
                    '**/controller/**',
                    '**/client/**'
            ])
        }))
    }
}
