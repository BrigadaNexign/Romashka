services:
  postgres:
    image: 'postgres:latest'
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '54320:5432'
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-admin} -d ${DB_NAME:-app_db}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - romashka-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - romashka-network
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "bash", "-lc", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - romashka-network
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - romashka-network

  init-topics:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-lc"]
    command: >
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists
      --topic cdr --replication-factor 1 --partitions 1
    networks:
      - romashka-network

  liquibase:
    image: liquibase/liquibase
    container_name: liquibase
    volumes:
      - ./resources/db/changelog/changelog-master.xml:/liquibase/changelog-master.xml
      - ./resources/db/changelog/v.0.0.2:/liquibase/v.0.0.2
      - ./resources/db/changelog/v.0.0.3:/liquibase/v.0.0.3
      - ./resources/db/changelog/v.0.0.4:/liquibase/v.0.0.4
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - romashka-network
    command: --url="jdbc:postgresql://postgres_db:5432/${DB_NAME}" --username=${DB_USER} --password=${DB_PASSWORD} --changeLogFile=changelog-master.xml update

  cdr:
    build: CDR/
    container_name: cdr
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - romashka-network
    ports:
      - "8080:8080"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - APP_KAFKA_CDR_TOPIC=cdr
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  brt:
    build: BRT/
    container_name: brt
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - romashka-network
    ports:
      - "8081:8081"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - APP_KAFKA_CDR_TOPIC=cdr

  hrs:
    build: HRS/
    container_name: hrs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - romashka-network
    ports:
      - "8082:8082"

  crm:
    build: CRM/
    container_name: crm
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - romashka-network
    ports:
      - "8083:8083"

networks:
  romashka-network:
    driver: bridge

volumes:
  db-data:
  kafka-data:
  zk-data:
  zk-log:
