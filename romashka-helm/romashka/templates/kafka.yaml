apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    {{- include "romashka.labels" . | nindent 4 }}
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: kafka
  ports:
    - name: kafka
      port: {{ .Values.kafka.servicePort }}
      targetPort: {{ .Values.kafka.servicePort }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  labels:
    {{- include "romashka.labels" . | nindent 4 }}
spec:
  serviceName: kafka
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
        {{- include "romashka.labels" . | nindent 8 }}
    spec:
      containers:
        - name: kafka
          image: {{ .Values.images.kafka }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          ports:
            - containerPort: {{ .Values.kafka.servicePort }}
              name: kafka
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
          command: ["/bin/bash","-lc"]
          args:
            - |
              set -euo pipefail
              ordinal="${HOSTNAME##*-}"
              export KAFKA_BROKER_ID="${ordinal}"
              export KAFKA_LISTENERS="PLAINTEXT://0.0.0.0:{{ .Values.kafka.servicePort }}"
              export KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://${HOSTNAME}.kafka:{{ .Values.kafka.servicePort }}"
              export KAFKA_LISTENER_SECURITY_PROTOCOL_MAP="PLAINTEXT:PLAINTEXT"
              export KAFKA_INTER_BROKER_LISTENER_NAME="PLAINTEXT"
              export KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR="3"
              export KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR="3"
              export KAFKA_TRANSACTION_STATE_LOG_MIN_ISR="2"
              export KAFKA_DEFAULT_REPLICATION_FACTOR="3"
              export KAFKA_MIN_INSYNC_REPLICAS="2"
              exec /etc/confluent/docker/run
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
          resources:
            {{- toYaml .Values.kafka.resources | nindent 12 }}
  volumeClaimTemplates:
    - metadata: { name: data }
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.kafka.storage.storageClassName }}
        storageClassName: {{ .Values.kafka.storage.storageClassName | quote }}
        {{- end }}
        resources: { requests: { storage: {{ .Values.kafka.storage.size }} } }
